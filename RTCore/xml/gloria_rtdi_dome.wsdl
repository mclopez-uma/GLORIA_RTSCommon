<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- ***************************** -->
<!-- * Archive: Gloria RTDI DOME * -->
<!-- * Author: Juan Cabello      * -->
<!-- * Date  : 7/09/2012         * -->
<!-- ***************************** -->
<wsdl:definitions xmlns:gloria.rt.entity.device="http://gloria.eu/rt/entity/device" xmlns:gloria.rtdi.fault="http://gloria.eu/rtdi/fault" xmlns:rtdi.dome="http://gloria.eu/rtdi.dome" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="gloria_rtdi_dome" targetNamespace="http://gloria.eu/rtdi.dome">
  <wsdl:types>
    <xsd:schema targetNamespace="http://gloria.eu/rtdi.dome">
    
      <xsd:import namespace="http://gloria.eu/rtdi/fault" schemaLocation="gloria_rtdi_fault.xsd"/> 
      <xsd:import namespace="http://gloria.eu/rt/entity/device" schemaLocation="gloria_rti_device.xsd"/>
      
      <!-- BASIC TYPE RESPONSES - BEGIN -->
      
	  <xsd:element name="voidResponse">
        <xsd:complexType>
          <xsd:sequence>            
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
	  
      <xsd:element name="stringResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="out" type="xsd:string"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name="booleanResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="out" type="xsd:boolean"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name="intResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="out" type="xsd:int"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name="longResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="out" type="xsd:long"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <xsd:element name="doubleResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="out" type="xsd:double"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      
      <!-- BASIC TYPE RESPONSES - END -->
            
      <!-- COMMON DEVICE ELEMENTS - BEGIN -->
      <xsd:element name="devGetConfiguration">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devGetDeviceProperties">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devGetDevicePropertiesResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element maxOccurs="unbounded" minOccurs="0" name="out" type="gloria.rt.entity.device:deviceProperty"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
     <xsd:element name="devGetDeviceProperty">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:string"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devGetDevicePropertyResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="out" type="gloria.rt.entity.device:deviceProperty"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
     <xsd:element name="devIsConnected">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devGetDevice">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="allProperties" type="xsd:boolean"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devGetDeviceResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="out" type="gloria.rt.entity.device:device"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devUpdateDeviceProperty">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:string"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" name="value" type="xsd:string"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devUpdateDevicePropertyAsync">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:string"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" name="value" type="xsd:string"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devConnect">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devDisconnect">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="devIsBlocked">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <!-- COMMON DEVICE ELEMENTS - END -->
      
      <!-- DOME ELEMENTS - BEGIN -->
      <xsd:element name="domGetNumberElement">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domCanSetAltitude">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domCanSetAzimuth">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domCanSetPark">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domIsAtHome">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domIsAtPark">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domGetAltitude">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domGetAzimuth">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domOpen">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="element" type="xsd:int"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domClose">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="element" type="xsd:int"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domGoHome">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domSetPark">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="altitude" type="xsd:double"/>
            <xsd:element name="azimuth" type="xsd:double"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domPark">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domMoveAzimuth">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="azimuth" type="xsd:double"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domMoveAltitude">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="altitude" type="xsd:double"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domSetTracking">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="value" type="xsd:boolean"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="domGetTracking">
        <xsd:complexType>
          <xsd:sequence>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
	  <xsd:element name="domSlewObject">
	    <xsd:complexType>
		  <xsd:sequence>
			<xsd:element name="object" type="xsd:string"/>
		  </xsd:sequence>
	    </xsd:complexType>
      </xsd:element>
      <!-- DOME ELEMENTS - END -->
      
    </xsd:schema> 
  </wsdl:types>
  
  <!-- ERROR MESSAGES - BEGIN -->
  <wsdl:message name="rtdError">
    <wsdl:part element="gloria.rtdi.fault:errorDetail" name="rtdError">    
    </wsdl:part>
  </wsdl:message>
  <!-- ERROR MESSAGES - END -->
  
  <!-- COMMON DEVICE MESSAGES - BEGIN -->
  <wsdl:message name="devGetConfigurationRequest">
    <wsdl:part element="rtdi.dome:devGetConfiguration" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devGetConfigurationResponse">
    <wsdl:part element="rtdi.dome:stringResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devGetDeviceRequest">
    <wsdl:part element="rtdi.dome:devGetDevice" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devGetDeviceResponse">
    <wsdl:part element="rtdi.dome:devGetDeviceResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
  
  <wsdl:message name="devGetDevicePropertiesRequest">
    <wsdl:part element="rtdi.dome:devGetDeviceProperties" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devGetDevicePropertiesResponse">
    <wsdl:part element="rtdi.dome:devGetDevicePropertiesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
  <wsdl:message name="devGetDevicePropertyRequest">
    <wsdl:part element="rtdi.dome:devGetDeviceProperty" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devGetDevicePropertyResponse">
    <wsdl:part element="rtdi.dome:devGetDevicePropertyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
  <wsdl:message name="devUpdateDevicePropertyRequest">
    <wsdl:part element="rtdi.dome:devUpdateDeviceProperty" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devUpdateDevicePropertyResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
  <wsdl:message name="devUpdateDevicePropertyAsyncRequest">
    <wsdl:part element="rtdi.dome:devUpdateDevicePropertyAsync" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devUpdateDevicePropertyAsyncResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
   <wsdl:message name="devIsConnectedRequest">
    <wsdl:part element="rtdi.dome:devIsConnected" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devIsConnectedResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
  <wsdl:message name="devConnectRequest">
    <wsdl:part element="rtdi.dome:devConnect" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devConnectResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
  <wsdl:message name="devDisconnectRequest">
    <wsdl:part element="rtdi.dome:devDisconnect" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devDisconnectResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devIsBlockedRequest">
    <wsdl:part element="rtdi.dome:devIsBlocked" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="devIsBlockedResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  
  <!-- COMMON DEVICE MESSAGES - END -->
 
  
  <!-- DOME DEVICE MESSAGES - BEGIN -->
  <wsdl:message name="domGetNumberElementRequest">
    <wsdl:part element="rtdi.dome:domGetNumberElement" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGetNumberElementResponse">
    <wsdl:part element="rtdi.dome:intResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCanSetAltitudeRequest">
    <wsdl:part element="rtdi.dome:domCanSetAltitude" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCanSetAltitudeResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCanSetAzimuthRequest">
    <wsdl:part element="rtdi.dome:domCanSetAzimuth" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCanSetAzimuthResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCanSetParkRequest">
    <wsdl:part element="rtdi.dome:domCanSetPark" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCanSetParkResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domIsAtHomeRequest">
    <wsdl:part element="rtdi.dome:domIsAtHome" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domIsAtHomeResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domIsAtParkRequest">
    <wsdl:part element="rtdi.dome:domIsAtPark" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domIsAtParkResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGetAltitudeRequest">
    <wsdl:part element="rtdi.dome:domGetAltitude" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGetAltitudeResponse">
    <wsdl:part element="rtdi.dome:doubleResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGetAzimuthRequest">
    <wsdl:part element="rtdi.dome:domGetAzimuth" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGetAzimuthResponse">
    <wsdl:part element="rtdi.dome:doubleResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domOpenRequest">
    <wsdl:part element="rtdi.dome:domOpen" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domOpenResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCloseRequest">
    <wsdl:part element="rtdi.dome:domClose" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domCloseResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGoHomeRequest">
    <wsdl:part element="rtdi.dome:domGoHome" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGoHomeResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domSetParkRequest">
    <wsdl:part element="rtdi.dome:domSetPark" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domSetParkResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domParkRequest">
    <wsdl:part element="rtdi.dome:domPark" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domParkResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domMoveAzimuthRequest">
    <wsdl:part element="rtdi.dome:domMoveAzimuth" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domMoveAzimuthResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domMoveAltitudeRequest">
    <wsdl:part element="rtdi.dome:domMoveAltitude" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domMoveAltitudeResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domSetTrackingRequest">
    <wsdl:part element="rtdi.dome:domSetTracking" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domSetTrackingResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGetTrackingRequest">
    <wsdl:part element="rtdi.dome:domGetTracking" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domGetTrackingResponse">
    <wsdl:part element="rtdi.dome:booleanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domSlewObjectRequest">
    <wsdl:part element="rtdi.dome:domSlewObject" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="domSlewObjectResponse">
    <wsdl:part element="rtdi.dome:voidResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <!-- DOME DEVICE MESSAGES - END -->
  
  
  <wsdl:portType name="gloria_rtdi_dome"> 
  
  	<!-- COMMON DEVICE PORT TYPE OPS - BEGIN -->    
    <wsdl:operation name="devGetDevice">
	  <wsdl:documentation>
	  Recover the information of one device.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Identifier.
	  @return Current device data.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devGetDeviceRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devGetDeviceResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devGetDeviceProperties">
	  <wsdl:documentation>
	  Recover the properties of a device.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Identifier.
	  @return Properties List.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devGetDevicePropertiesRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devGetDevicePropertiesResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devGetDeviceProperty">
	  <wsdl:documentation>
	  Recover a property of a device.
	  @param name Property name
	  @return Properties List.
	  @throws RtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devGetDevicePropertyRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devGetDevicePropertyResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devUpdateDeviceProperty">
	  <wsdl:documentation>
	  Updates a property into a Device configuration. If the property is a readonly property or the value cannot be (internally) transformed into the proper type, an exception will be throw.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Identifier.
	  @param name Property name.
	  @param value Values of the property.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devUpdateDevicePropertyRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devUpdateDevicePropertyResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devUpdateDevicePropertyAsync">
	  <wsdl:documentation>
	  Updates a property into a Device configuration. If the property is a readonly property or the value cannot be (internally) transformed into the proper type, an exception will be throw.
	  Asynchronous call.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Identifier.
	  @param name Property name.
	  @param value Values of the property.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devUpdateDevicePropertyAsyncRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devUpdateDevicePropertyAsyncResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devIsConnected">
	  <wsdl:documentation>
	  Checks the link between the driver and the device. If True, the link is enable.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Identifier.
	  @return boolean.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devIsConnectedRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devIsConnectedResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devConnect">
	  <wsdl:documentation>
	  Creates the link between the driver and the device.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Identifier.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devConnectRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devConnectResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devDisconnect">
	  <wsdl:documentation>
	  Controls the link between the driver and the device. Set True to enable the link. Set False to disable the link.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Identifier.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devDisconnectRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devDisconnectResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devGetConfiguration">
	  <wsdl:documentation>
	  Returns a String containing a full configuration information. For logging purpose.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device Id.
	  @return Configuration in a string.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devGetConfigurationRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devGetConfigurationResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    
    <wsdl:operation name="devIsBlocked">
	  <wsdl:documentation>
	  Returns true if the device is blocked because of its blocked state or some dependency to other device.
	  @throws RtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:devIsBlockedRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:devIsBlockedResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <!-- COMMON DEVICE PORT TYPE OPS - END -->
    
    
    <!-- DOME PORT TYPE OPS - BEGIN -->
    <wsdl:operation name="domGetNumberElement">
	  <wsdl:documentation>
	  Returns  the number (N) of element of the dome.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return Number of elements.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domGetNumberElementRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domGetNumberElementResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domCanSetAltitude">
	  <wsdl:documentation> 
	  Returns true if it is capable of setting dome altitude.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return boolean value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domCanSetAltitudeRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domCanSetAltitudeResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domCanSetAzimuth">
	  <wsdl:documentation>
	  Returns true if it is capable of setting dome azimuth.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return Boolean value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domCanSetAzimuthRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domCanSetAzimuthResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domCanSetPark">
	  <wsdl:documentation>
	  Returns true if it is capable of setting dome park position.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return Boolean value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domCanSetParkRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domCanSetParkResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domIsAtHome">
	  <wsdl:documentation>
	  Returns true if the dome is in its home position.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return Boolean value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domIsAtHomeRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domIsAtHomeResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domIsAtPark">
	  <wsdl:documentation>
	  Returns true if the dome is in its park position.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return Boolean value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domIsAtParkRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domIsAtParkResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domGetAltitude">
	  <wsdl:documentation>
	  Returns the altitude position of the dome.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return Altitude.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domGetAltitudeRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domGetAltitudeResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domGetAzimuth">
	  <wsdl:documentation>
	  Returns the azimuth position of the dome.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return Azimuth.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domGetAzimuthRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domGetAzimuthResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domOpen">
	  <wsdl:documentation>
	  This method will open the n_element of the dome. For this, the state must be CLOSE.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @param element The element (order) to open.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domOpenRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domOpenResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domClose">
	  <wsdl:documentation>
	  This method will close the n_element of the dome. For this, the state must be OPEN.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @param element The element (order) to close.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domCloseRequest">
      </wsdl:input>
      <wsdl:output message="rtdi.dome:domCloseResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domGoHome">
	  <wsdl:documentation>
	  This method will move the dome to the home position. If an error happens (i.e. electrical, motor...), this method will be used to move the dome in a known position.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domGoHomeRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domGoHomeResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domSetPark">
	  <wsdl:documentation>
	  This method will establish the dome park position.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @param altitude Altitude value.
	  @param azimuth  Azimuth value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domSetParkRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domSetParkResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domPark">
	  <wsdl:documentation>
	  Moves dome to park position.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domParkRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domParkResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domMoveAzimuth">
	  <wsdl:documentation>
	  This method will move the dome to the indicated azimuth.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @param azimuth Azimuth value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domMoveAzimuthRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domMoveAzimuthResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domMoveAltitude">
	  <wsdl:documentation>
	  This method will move the dome to the indicated altitude.
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @param altitude Altitude value.
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domMoveAltitudeRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domMoveAltitudeResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domSetTracking">
	  <wsdl:documentation>
	  Access method to the state (on/off) of the mount tracking drive..
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @return value If true the tracking is active
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domSetTrackingRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domSetTrackingResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domGetTracking">
	  <wsdl:documentation>
	  Access method to the state (on/off) of the mount tracking drive..
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @param value True to activate the tracking
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domGetTrackingRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domGetTrackingResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
    <wsdl:operation name="domSlewObject">
	  <wsdl:documentation>
	  Slew to an object
	  @param session Session token if the used login method is based on session token type.
	  @param deviceId Device identifier.
	  @param object
	  @throws rtdError In error case.
	  </wsdl:documentation>
      <wsdl:input message="rtdi.dome:domSlewObjectRequest">
    </wsdl:input>
      <wsdl:output message="rtdi.dome:domSlewObjectResponse">
    </wsdl:output>
    <wsdl:fault message="rtdi.dome:rtdError" name="error"/>
    </wsdl:operation>
   
    <!-- DOME PORT TYPE OPS - END -->
    
  </wsdl:portType>

  
  <wsdl:binding name="gloria_rtdi_domeSOAP" type="rtdi.dome:gloria_rtdi_dome">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    
    <!-- COMMON DEVICE BINDING OPS - BEGIN -->
    <wsdl:operation name="devGetDevice">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devGetDevice"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devGetDeviceProperties">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devGetDeviceProperties"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devGetDeviceProperty">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devGetDeviceProperty"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devUpdateDeviceProperty">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devUpdateDeviceProperty"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
     <wsdl:operation name="devUpdateDevicePropertyAsync">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devUpdateDeviceProperty"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devIsConnected">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devIsConnected"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devConnect">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devConnect"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devDisconnect">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devDisconnect"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devGetConfiguration">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devGetConfiguration"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    
    <wsdl:operation name="devIsBlocked">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/devIsBlocked"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <!-- COMMON DEVICE BINDING OPS - END -->
    
     <!-- DOME DEVICE BINDING OPS - BEGIN -->
     <wsdl:operation name="domGetNumberElement">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domGetNumberElement"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domCanSetAltitude">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domCanSetAltitude"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domCanSetAzimuth">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domCanSetAzimuth"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domCanSetPark">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domCanSetPark"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domIsAtHome">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domIsAtHome"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domIsAtPark">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domIsAtPark"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domGetAltitude">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domGetAltitude"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domGetAzimuth">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domGetAzimuth"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domOpen">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domOpen"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domClose">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domClose"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domGoHome">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domGoHome"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domSetPark">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domSetPark"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domPark">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domPark"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domMoveAzimuth">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domMoveAzimuth"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domMoveAltitude">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domMoveAltitude"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domSetTracking">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domSetTracking"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domGetTracking">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domGetTracking"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="domSlewObject">
      <soap:operation soapAction="http://gloria.eu/rtdi.dome/domSlewObject"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
       
     <!-- DOME DEVICE BINDING OPS - END -->
    
  </wsdl:binding>
  
  <wsdl:service name="gloria_rtdi_dome">
    <wsdl:documentation/>
    <wsdl:port binding="rtdi.dome:gloria_rtdi_domeSOAP" name="gloria_rtdi_domeSOAP">
      <soap:address location="http://localhost:8080/RTDI_Dome/services/gloria_rtdi_domeSOAP"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>